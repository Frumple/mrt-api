//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var World = newWorldTable("mywarp_main", "world", "")

type worldTable struct {
	mysql.Table

	// Columns
	WorldID mysql.ColumnInteger
	UUID    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type WorldTable struct {
	worldTable

	NEW worldTable
}

// AS creates new WorldTable with assigned alias
func (a WorldTable) AS(alias string) *WorldTable {
	return newWorldTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WorldTable with assigned schema name
func (a WorldTable) FromSchema(schemaName string) *WorldTable {
	return newWorldTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WorldTable with assigned table prefix
func (a WorldTable) WithPrefix(prefix string) *WorldTable {
	return newWorldTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WorldTable with assigned table suffix
func (a WorldTable) WithSuffix(suffix string) *WorldTable {
	return newWorldTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWorldTable(schemaName, tableName, alias string) *WorldTable {
	return &WorldTable{
		worldTable: newWorldTableImpl(schemaName, tableName, alias),
		NEW:        newWorldTableImpl("", "new", ""),
	}
}

func newWorldTableImpl(schemaName, tableName, alias string) worldTable {
	var (
		WorldIDColumn  = mysql.IntegerColumn("world_id")
		UUIDColumn     = mysql.StringColumn("uuid")
		allColumns     = mysql.ColumnList{WorldIDColumn, UUIDColumn}
		mutableColumns = mysql.ColumnList{UUIDColumn}
	)

	return worldTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WorldID: WorldIDColumn,
		UUID:    UUIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
