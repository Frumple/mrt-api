//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Group = newGroupTable("mywarp_main", "group", "")

type groupTable struct {
	mysql.Table

	// Columns
	GroupID mysql.ColumnInteger
	Name    mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type GroupTable struct {
	groupTable

	NEW groupTable
}

// AS creates new GroupTable with assigned alias
func (a GroupTable) AS(alias string) *GroupTable {
	return newGroupTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new GroupTable with assigned schema name
func (a GroupTable) FromSchema(schemaName string) *GroupTable {
	return newGroupTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new GroupTable with assigned table prefix
func (a GroupTable) WithPrefix(prefix string) *GroupTable {
	return newGroupTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new GroupTable with assigned table suffix
func (a GroupTable) WithSuffix(suffix string) *GroupTable {
	return newGroupTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newGroupTable(schemaName, tableName, alias string) *GroupTable {
	return &GroupTable{
		groupTable: newGroupTableImpl(schemaName, tableName, alias),
		NEW:        newGroupTableImpl("", "new", ""),
	}
}

func newGroupTableImpl(schemaName, tableName, alias string) groupTable {
	var (
		GroupIDColumn  = mysql.IntegerColumn("group_id")
		NameColumn     = mysql.StringColumn("name")
		allColumns     = mysql.ColumnList{GroupIDColumn, NameColumn}
		mutableColumns = mysql.ColumnList{NameColumn}
	)

	return groupTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		GroupID: GroupIDColumn,
		Name:    NameColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
