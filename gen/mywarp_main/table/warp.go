//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Warp = newWarpTable("mywarp_main", "warp", "")

type warpTable struct {
	mysql.Table

	// Columns
	WarpID         mysql.ColumnInteger
	Name           mysql.ColumnString
	PlayerID       mysql.ColumnInteger
	X              mysql.ColumnFloat
	Y              mysql.ColumnFloat
	Z              mysql.ColumnFloat
	Pitch          mysql.ColumnFloat
	Yaw            mysql.ColumnFloat
	WorldID        mysql.ColumnInteger
	CreationDate   mysql.ColumnTimestamp
	Type           mysql.ColumnInteger
	Visits         mysql.ColumnInteger
	WelcomeMessage mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type WarpTable struct {
	warpTable

	NEW warpTable
}

// AS creates new WarpTable with assigned alias
func (a WarpTable) AS(alias string) *WarpTable {
	return newWarpTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new WarpTable with assigned schema name
func (a WarpTable) FromSchema(schemaName string) *WarpTable {
	return newWarpTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new WarpTable with assigned table prefix
func (a WarpTable) WithPrefix(prefix string) *WarpTable {
	return newWarpTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new WarpTable with assigned table suffix
func (a WarpTable) WithSuffix(suffix string) *WarpTable {
	return newWarpTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newWarpTable(schemaName, tableName, alias string) *WarpTable {
	return &WarpTable{
		warpTable: newWarpTableImpl(schemaName, tableName, alias),
		NEW:       newWarpTableImpl("", "new", ""),
	}
}

func newWarpTableImpl(schemaName, tableName, alias string) warpTable {
	var (
		WarpIDColumn         = mysql.IntegerColumn("warp_id")
		NameColumn           = mysql.StringColumn("name")
		PlayerIDColumn       = mysql.IntegerColumn("player_id")
		XColumn              = mysql.FloatColumn("x")
		YColumn              = mysql.FloatColumn("y")
		ZColumn              = mysql.FloatColumn("z")
		PitchColumn          = mysql.FloatColumn("pitch")
		YawColumn            = mysql.FloatColumn("yaw")
		WorldIDColumn        = mysql.IntegerColumn("world_id")
		CreationDateColumn   = mysql.TimestampColumn("creation_date")
		TypeColumn           = mysql.IntegerColumn("type")
		VisitsColumn         = mysql.IntegerColumn("visits")
		WelcomeMessageColumn = mysql.StringColumn("welcome_message")
		allColumns           = mysql.ColumnList{WarpIDColumn, NameColumn, PlayerIDColumn, XColumn, YColumn, ZColumn, PitchColumn, YawColumn, WorldIDColumn, CreationDateColumn, TypeColumn, VisitsColumn, WelcomeMessageColumn}
		mutableColumns       = mysql.ColumnList{NameColumn, PlayerIDColumn, XColumn, YColumn, ZColumn, PitchColumn, YawColumn, WorldIDColumn, CreationDateColumn, TypeColumn, VisitsColumn, WelcomeMessageColumn}
	)

	return warpTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		WarpID:         WarpIDColumn,
		Name:           NameColumn,
		PlayerID:       PlayerIDColumn,
		X:              XColumn,
		Y:              YColumn,
		Z:              ZColumn,
		Pitch:          PitchColumn,
		Yaw:            YawColumn,
		WorldID:        WorldIDColumn,
		CreationDate:   CreationDateColumn,
		Type:           TypeColumn,
		Visits:         VisitsColumn,
		WelcomeMessage: WelcomeMessageColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
