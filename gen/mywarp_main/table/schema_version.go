//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SchemaVersion = newSchemaVersionTable("mywarp_main", "schema_version", "")

type schemaVersionTable struct {
	mysql.Table

	// Columns
	InstalledRank mysql.ColumnInteger
	Version       mysql.ColumnString
	Description   mysql.ColumnString
	Type          mysql.ColumnString
	Script        mysql.ColumnString
	Checksum      mysql.ColumnInteger
	InstalledBy   mysql.ColumnString
	InstalledOn   mysql.ColumnTimestamp
	ExecutionTime mysql.ColumnInteger
	Success       mysql.ColumnBool

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SchemaVersionTable struct {
	schemaVersionTable

	NEW schemaVersionTable
}

// AS creates new SchemaVersionTable with assigned alias
func (a SchemaVersionTable) AS(alias string) *SchemaVersionTable {
	return newSchemaVersionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SchemaVersionTable with assigned schema name
func (a SchemaVersionTable) FromSchema(schemaName string) *SchemaVersionTable {
	return newSchemaVersionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SchemaVersionTable with assigned table prefix
func (a SchemaVersionTable) WithPrefix(prefix string) *SchemaVersionTable {
	return newSchemaVersionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SchemaVersionTable with assigned table suffix
func (a SchemaVersionTable) WithSuffix(suffix string) *SchemaVersionTable {
	return newSchemaVersionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSchemaVersionTable(schemaName, tableName, alias string) *SchemaVersionTable {
	return &SchemaVersionTable{
		schemaVersionTable: newSchemaVersionTableImpl(schemaName, tableName, alias),
		NEW:                newSchemaVersionTableImpl("", "new", ""),
	}
}

func newSchemaVersionTableImpl(schemaName, tableName, alias string) schemaVersionTable {
	var (
		InstalledRankColumn = mysql.IntegerColumn("installed_rank")
		VersionColumn       = mysql.StringColumn("version")
		DescriptionColumn   = mysql.StringColumn("description")
		TypeColumn          = mysql.StringColumn("type")
		ScriptColumn        = mysql.StringColumn("script")
		ChecksumColumn      = mysql.IntegerColumn("checksum")
		InstalledByColumn   = mysql.StringColumn("installed_by")
		InstalledOnColumn   = mysql.TimestampColumn("installed_on")
		ExecutionTimeColumn = mysql.IntegerColumn("execution_time")
		SuccessColumn       = mysql.BoolColumn("success")
		allColumns          = mysql.ColumnList{InstalledRankColumn, VersionColumn, DescriptionColumn, TypeColumn, ScriptColumn, ChecksumColumn, InstalledByColumn, InstalledOnColumn, ExecutionTimeColumn, SuccessColumn}
		mutableColumns      = mysql.ColumnList{VersionColumn, DescriptionColumn, TypeColumn, ScriptColumn, ChecksumColumn, InstalledByColumn, InstalledOnColumn, ExecutionTimeColumn, SuccessColumn}
	)

	return schemaVersionTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		InstalledRank: InstalledRankColumn,
		Version:       VersionColumn,
		Description:   DescriptionColumn,
		Type:          TypeColumn,
		Script:        ScriptColumn,
		Checksum:      ChecksumColumn,
		InstalledBy:   InstalledByColumn,
		InstalledOn:   InstalledOnColumn,
		ExecutionTime: ExecutionTimeColumn,
		Success:       SuccessColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
