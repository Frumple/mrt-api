//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/mysql"
)

var Player = newPlayerTable("mywarp_main", "player", "")

type playerTable struct {
	mysql.Table

	// Columns
	PlayerID mysql.ColumnInteger
	UUID     mysql.ColumnString

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type PlayerTable struct {
	playerTable

	NEW playerTable
}

// AS creates new PlayerTable with assigned alias
func (a PlayerTable) AS(alias string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new PlayerTable with assigned schema name
func (a PlayerTable) FromSchema(schemaName string) *PlayerTable {
	return newPlayerTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new PlayerTable with assigned table prefix
func (a PlayerTable) WithPrefix(prefix string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new PlayerTable with assigned table suffix
func (a PlayerTable) WithSuffix(suffix string) *PlayerTable {
	return newPlayerTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newPlayerTable(schemaName, tableName, alias string) *PlayerTable {
	return &PlayerTable{
		playerTable: newPlayerTableImpl(schemaName, tableName, alias),
		NEW:         newPlayerTableImpl("", "new", ""),
	}
}

func newPlayerTableImpl(schemaName, tableName, alias string) playerTable {
	var (
		PlayerIDColumn = mysql.IntegerColumn("player_id")
		UUIDColumn     = mysql.StringColumn("uuid")
		allColumns     = mysql.ColumnList{PlayerIDColumn, UUIDColumn}
		mutableColumns = mysql.ColumnList{UUIDColumn}
	)

	return playerTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		PlayerID: PlayerIDColumn,
		UUID:     UUIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
